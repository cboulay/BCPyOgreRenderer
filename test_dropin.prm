Filtering:SpatialFilter:SpatialFilter matrix SpatialFilter= 1 { C3 FC5 CP5 FC1 CP1 } 1 -0.25 -0.25 -0.25 -0.25 0 % % // columns represent input channels, rows represent output channels
Filtering:Spectral%20Estimation:ARThread float FirstBinCenter= 10Hz 0Hz % % // Center of first frequency bin (in Hz)
Filtering:Spectral%20Estimation:ARThread float LastBinCenter= 10Hz 30Hz % % // Center of last frequency bin (in Hz)
Filtering:Spectral%20Estimation:ARThread float BinWidth= 2Hz 3Hz % % // Width of spectral bins (in Hz)
Filtering:Spectral%20Estimation:ARThread int OutputType= 1 0 0 2 // 0: Spectral Amplitude, 1: Spectral Power, 2: Coefficients (enumeration)
Filtering:Spectral%20Estimation:SpectralEstimatorChoice int SpectralEstimator= 2 1 0 2 // Choice of spectral estimation algorithm, 0: None, 1: AR, 2: FFT (enumeration)
Filtering:Windowing:WindowingThread int WindowLength= 1s 0.5s % % // Length of window
Filtering:Windowing:WindowingThread int Detrend= 2 0 0 2 // Detrend data? 0: no, 1: mean, 2: linear (enumeration)
Filtering:Windowing:WindowingThread int WindowFunction= 1 0 0 3 // Window function 0: Rectangular, 1: Hamming, 2: Hann, 3: Blackman (enumeration)
Filtering:LinearClassifier matrix Classifier= 1 { input%20channel input%20element%20(bin) output%20channel weight } 1 1 1 1 // Linear classification matrix in sparse representation
Filtering:LPFilter float LPTimeConstant= 0.3s 16s 0 % // time constant for the low pass filter
Filtering:ExpressionFilter matrix Expressions= 1 1 -10*log10(Signal(1,1)) // expressions used to compute the output of the ExpressionFilter (rows are channels; empty matrix for none)
Filtering:Normalizer floatlist NormalizerOffsets= 1 75 0 % % // normalizer offsets
Filtering:Normalizer floatlist NormalizerGains= 1 0.9 0 % % // normalizer gain values
Filtering:Normalizer intlist Adaptation= 1 2 0 0 2 // 0: no adaptation, 1: zero mean, 2: zero mean, unit variance 3: zero mean, pcnt diff (enumeration)
Filtering:Normalizer matrix BufferConditions= 1 1 (Baseline==1) // expressions corresponding to data buffers (columns correspond to output channels, multiple rows correspond to multiple buffers)
Filtering:Normalizer float BufferLength= 20s 9s % % // time window of past data per buffer that enters into statistic
Filtering:Normalizer string UpdateTrigger= (GoCue==1) // expression to trigger offset/gain update when changing from 0 (use empty string for continuous update)
Source:Signal%20Properties:DataIOFilter int SourceCh= 31 16 1 % // number of digitized and stored channels
Source:Signal%20Properties:DataIOFilter int SampleBlockSize= 32 32 1 % // number of samples transmitted at a time
Source:Signal%20Properties:DataIOFilter int SamplingRate= 256Hz 256Hz 1 % // sample rate
Source:Signal%20Properties:DataIOFilter list ChannelNames= 31 FP1 FP2 F3 F4 C3 C4 P3 P4 O1 O2 F7 F8 T7 T8 P7 P8 Fz Cz Pz Oz FC1 FC2 CP1 CP2 FC5 FC6 CP5 CP6 TP9 TP10 POz // list of channel names
Source:Signal%20Properties:DataIOFilter floatlist SourceChOffset= 31 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 % % // Offset for channels in A/D units
Source:Signal%20Properties:DataIOFilter floatlist SourceChGain= 31 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0.003 % % // gain for each channel (A/D units -> muV)
Source:gUSBampADC intlist SourceChList= 31 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 0 1 128 // list of channels to digitize
Source:gUSBampADC intlist SourceChDevices= 2 16 15 16 1 17 // number of digitized channels per device
Source:gUSBampADC int NumBuffers= 5 1 2 32 // number of software buffers to use
Source:gUSBampADC string DeviceIDMaster= UA-2007.10.33 // deviceID for the device whose SYNC goes to the slaves
Source:gUSBampADC int FilterEnabled= 1 1 0 1 // Enable pass band filter (0=no, 1=yes)
Source:gUSBampADC float FilterHighPass= 0.1 0.1 0 50 // high pass filter for pass band
Source:gUSBampADC float FilterLowPass= 60 60 0 4000 // low pass filter for pass band
Source:gUSBampADC int FilterModelOrder= 8 8 1 12 // filter model order for pass band
Source:gUSBampADC int FilterType= 1 1 1 2 // filter type for pass band (1=BUTTERWORTH, 2=CHEBYSHEV)
Source:gUSBampADC int NotchEnabled= 1 1 0 1 // Enable notch (0=no, 1=yes)
Source:gUSBampADC float NotchHighPass= 48 58 0 70 // high pass filter for notch filter
Source:gUSBampADC float NotchLowPass= 52 62 0 4000 // low pass filter for notch filter
Source:gUSBampADC int NotchModelOrder= 4 4 1 10 // filter model order for notch filter
Source:gUSBampADC int NotchType= 1 1 1 2 // filter type for pass band (1=CHEBYSHEV, 2=BUTTERWORTH)
Source:gUSBampADC list DeviceIDs= 2 UA-2007.10.33 UA-2007.10.36 // list of USBamps to be used (or auto)
Source:gUSBampADC int DigitalInput= 0 0 0 1 // enable digital input:  0: false, 1: true (enumeration)
Source:gUSBampADC int DigitalOutput= 0 0 0 1 // enable digital output on block acquisition (boolean)
Source:gUSBampADC string DigitalOutputEx= % // expression for output on digital output 2 (expression)
Source:gUSBampADC int SignalType= 1 0 0 1 // numeric type of output signal:  0: int16, 1: float32 (enumeration)
Source:gUSBampADC int AcquisitionMode= 0 0 0 2 // data acquisition mode:  0: analog signal acquisition, 1: calibration, 2: impedance (enumeration)
Source:gUSBampADC int CommonGround= 1 0 0 1 // internally connect GNDs from all blocks:  0: false, 1: true (enumeration)
Source:gUSBampADC int CommonReference= 1 0 0 1 // internally connect Refs from all blocks:  0: false, 1: true (enumeration)
Source:Alignment:AlignmentFilter int AlignChannels= 1 0 0 1 // align channels in time (0=no, 1=yes)
Source:Alignment:AlignmentFilter floatlist SourceChTimeOffset= 0 0 % % // time offsets for all source channels (may be empty)
Source:Online%20Processing:TransmissionFilter list TransmitChList= 5 C3 FC5 CP5 FC1 CP1 // list of transmitted channels
Source:Signal%20Properties:DataIOFilter list ReferenceChannelName= 1 FCz % % a // list of labels for reference channel or channels
Source:Signal%20Properties:DataIOFilter list GroundChannelName= 1 AFz % % a // label of the ground channel
Source:Playback int EnslavePython= 0 0 0 1 // force BCPy2000 modules to follow states supplied by the source module without being able to change them (boolean)
PythonApp:Design int TrialsPerBlock= 20 20 1 % // number of trials in one block
PythonApp:Design int BlocksPerRun= 1 20 1 % // number of sub-blocks in one run
PythonApp:Design list GoCueText= 1 Imagery // Text for cues. Defines N targets
PythonApp:Design float SigThresh= 15.0 // Signal must cross this threshold value/10
PythonApp:Design float TrialDur= 7.0 2.6 0 % // Total duration (s) for trial including extension feedback
Storage:Data%20Location:DataIOFilter string DataDirectory= D:\Studies\Keio\Takaharu\data\BCI2000 ..\data % % // path to top level data directory (directory)